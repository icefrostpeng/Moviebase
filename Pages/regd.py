import sys
import smtplib
from random import randint
from tkcalendar import Calendar, DateEntry
from datetime import date
from PIL import ImageTk, Image
from tkinter import *
import PIL
import smtplib
from random import randint
import pymysql
import pymysql.cursors
import paramiko
import pandas as pd
from paramiko import SSHClient
from sshtunnel import SSHTunnelForwarder
import re
import time
import register
import signin
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
# from signin import vp_start_gui
# from register import *

import hashlib

try:
	import Tkinter as tk
except ImportError:
	import tkinter as tk
from tkinter import messagebox

try:
	import ttk

	py3 = False
except ImportError:
	import tkinter.ttk as ttk

	py3 = True
sql_hostname = '127.0.0.1'
mypkey = paramiko.RSAKey.from_private_key_file('dem.pem')
sql_username = 'root'
sql_password = 'Srishtisingh@12'
sql_main_database = 'movie'
sql_port = 3306
ssh_host = '34.229.131.207'
ssh_user = 'ec2-user'
ssh_port = 22


def querys(email, name, age, dob, addr, phno, pass1):
	with SSHTunnelForwarder( #ssh tunnel initiation
			(ssh_host, ssh_port),
			ssh_username=ssh_user,
			ssh_pkey=mypkey,
			remote_bind_address=(sql_hostname, sql_port)) as tunnel:
		try:
			conn = pymysql.connect(host='127.0.0.1', user=sql_username, #connect to db
								   passwd=sql_password, db=sql_main_database,
								   port=tunnel.local_bind_port)
			cur = conn.cursor()
			sql = "INSERT INTO User (email,name,age,dob,addr,phno,pswd) VALUES (%s, %s, %s, %s, %s, %s, %s)" #insert query
			val = (email, name, age, dob, addr, phno, pass1) #bind values
			cur.execute(sql, val) #execute insert
			# cur.execute(q)
			conn.commit() #commit i.e save changes to db
			cur.execute("select * from User")
			result = cur.fetchone()
			print(result)
			# data = pd.read_sql_query(q, conn)
			conn.close()
			print("sucess")
			return 1 #return 1 if daata inserted successfully
		except Exception as e:
			print(e)
			return 0 # 0 incase of error
 

# ! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Mar 23, 2021 10:01:06 AM IST  platform: Windows NT


# from PIL import ImageTk, Image
# import PIL


def vp_start_gui_reg(data):
	'''Starting point when module is the main routine.'''
	global val, w, root
	root = tk.Tk() 
	top = RegOTP(data, root)
	root.mainloop()


w = None
global start
start=time.time()
global count
count=120 #timer set to 2min

def create_RegOTP(rt, *args, **kwargs):
	'''Starting point when module is imported by another module.
	   Correct form of call: 'create_RegOTP(root, *args, **kwargs)' .'''
	global w, w_win, root
	# rt = root
	root = rt
	w = tk.Toplevel(root)
	top = RegOTP(w)
	return w, top


def destroy_RegOTP():
	global w
	w.destroy()
	w = None


class RegOTP:
	def __init__(self, data, top=None):
		'''This class configures and populates the toplevel window.
		   top is the toplevel containing window.'''
		_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
		_fgcolor = '#000000'  # X11 color: 'black'
		_compcolor = '#d9d9d9'  # X11 color: 'gray85'
		_ana1color = '#d9d9d9'  # X11 color: 'gray85'
		_ana2color = '#ececec'  # Closest X11 color: 'gray92'

		# values to be inserted

		email = data[0]
		name = data[1]
		age = data[2]
		dob = data[3]
		addr = data[4]
		phno = data[5]
		pswd = data[6]

		f = open("credentials.txt", "a")
		creds = " \n " + email + " : " + pswd
		f.write(creds)
		f.close()

		pswd = pswd.encode() #hashing the password before storing
		pswd = hashlib.sha256(pswd).hexdigest()
		print(pswd)

		def random_with_N_digits():
			return randint(100000, 999999) #random integer as otp

		def verify():
			global start,count
			print(start)
			end = time.time()
			print(end)
			t = format(end - start)  # calculate the difference between end and start timer
			print(float(t))  # print the time in seconds
			if float(t) >= 160 or count==0: #if count is 0 then 2min are over
				messagebox.showinfo("Time out", "Session Expired ...Time out Please regenerate OTP") #show timout msg
				root.destroy()
				register.vp_start_register() #navigate the user back to registration page
			else:
				on_click() #else if the user enters otp before 2min then register the user by saving data in db


		def email_generator(name):
			sender_email = "rushiwatpal123@gmail.com"
			rec_email = email
			print(f'receiver email {email}')
			password = 'Rushi@12345'
			message = MIMEMultipart("alternative")
			message["Subject"] = "Theatre Buzz"
			message["From"] = sender_email
			message["To"] = rec_email
			otp = str(random_with_N_digits())
			# Create the plain-text and HTML version of your message

			html = """\
			<html>
			  <body>
				<h4>Hello {0},</h3><br>
				   <h3 style='color:blue'>Welcome to Theatre Buzz</h3><br>
				   <p>Your Otp for registration is - {1}
				</p><br>
				<br>
				<p>Always at your service,<br>
				<p style='color:DodgerBlue'>The Theatre Buzz Team </p></p>
			  </body>
			</html>
			""".format(name, otp)

			# Turn these into plain/html MIMEText objects

			part2 = MIMEText(html, "html")

			# Add HTML/plain-text parts to MIMEMultipart message
			# The email client will try to render the last part first
			message.attach(part2)
			send_mail(sender_email, password, rec_email, message.as_string())
			print(otp)
			return otp

		def send_mail(sender_email, password, rec_email, message):
			server = smtplib.SMTP('smtp.gmail.com', 587) #sending mail using smtp
			server.starttls()
			server.login(sender_email, password)
			server.sendmail(sender_email, rec_email, message)

		otp = email_generator(name)

		top.geometry("497x525+668+155")
		top.minsize(120, 1)
		top.maxsize(3004, 1913)
		top.resizable(1, 1)
		top.title("New Toplevel")
		top.configure(background="#000328")
		top.configure(highlightbackground="#d9d9d9")
		top.configure(highlightcolor="black")

		top.resizable(False, False)
		global img
		img = ImageTk.PhotoImage(file="bg.png")
		self.Background = tk.Label(top, image=img)
		self.Background.place(relx=0, rely=0, height=1000, width=1500)
		self.Background = img

		self.Label1 = tk.Label(top)
		self.Label1.place(relx=0.08, rely=-0.019, height=150, width=424)
		self.Label1.configure(activebackground="#f9f9f9")
		self.Label1.configure(activeforeground="black")
		self.Label1.configure(background="#000328")
		self.Label1.configure(disabledforeground="#a3a3a3")
		self.Label1.configure(font="-family {Segoe UI} -size 18")
		self.Label1.configure(foreground="#ffffff")
		self.Label1.configure(highlightbackground="#d9d9d9")
		self.Label1.configure(highlightcolor="black")
		self.Label1.configure(text='''Please check your email to Confirm your registration''')
		self.Label1.configure(wraplength="300")



		def on_click():
			global count
			user_otp = self.OTP_e.get() #get the user entered otp
			if user_otp == otp: #check if it is saame as that which was send
				'''print(email,name,age,dob,addr,phno,pswd)
				pswd=pswd.encode()
				pswd=hashlib.sha256(pswd).hexdigest()
				print(pswd)'''
				t = querys(email, name, age, dob, addr, phno, pswd) #if yes save the user details to db
				count=0 #decrement count to 0 to stop the timer
				if t == 1: #if details is successfully saved in db
					print('Login Success from email!')
					root.destroy()
					signin.vp_start_gui() #navigate user to signin page and ask for credentails


				else:
					print(f'failure from email') #incase if any error occurs while saving data in db like same email is entered again
					root.destroy()
					register.vp_start_register()

			else:
				messagebox.showinfo("Failure", "Invalid OTP!\n Try again") #if invalid otp is entered
				root.destroy()
				register.vp_start_register()
				print('Invalid OTP')

		self.Submit = tk.Button(top, command=verify) #submit button
		self.Submit.place(relx=0.302, rely=0.705, height=54, width=207)
		self.Submit.configure(activebackground="#ececec")
		self.Submit.configure(activeforeground="#000000")
		self.Submit.configure(background="#2ba5ff")
		self.Submit.configure(borderwidth="4")
		self.Submit.configure(disabledforeground="#a3a3a3")
		self.Submit.configure(font="-family {Segoe UI} -size 14")
		self.Submit.configure(foreground="#000000")
		self.Submit.configure(highlightbackground="#d9d9d9")
		self.Submit.configure(highlightcolor="black")
		self.Submit.configure(pady="0")
		self.Submit.configure(text='''Confirm Registration''')

		self.Label2 = tk.Label(top)
		self.Label2.place(relx=0.302, rely=0.400, height=60, width=194)
		self.Label2.configure(activebackground="#000040")
		self.Label2.configure(activeforeground="white")
		self.Label2.configure(activeforeground="#000000")
		self.Label2.configure(background="#000328")
		self.Label2.configure(disabledforeground="#a3a3a3")
		self.Label2.configure(font="-family {Segoe UI} -size 14")
		self.Label2.configure(foreground="#ffffff")
		self.Label2.configure(text='''Enter OTP from Email''')

		var=StringVar()
		var.set("timer= 2:00")
		def countdown(top): #timer code
			global count #count which wil keep track of time
			self.Label3 = tk.Label(top)
			self.Label3.place(relx=0.302, rely=0.295, height=60, width=194)
			self.Label3.configure(activebackground="#000040")
			self.Label3.configure(activeforeground="white")
			self.Label3.configure(activeforeground="#000000")
			self.Label3.configure(background="#000328")
			self.Label3.configure(disabledforeground="#a3a3a3")
			self.Label3.configure(font="-family {Segoe UI} -size 14")
			self.Label3.configure(foreground="#ffffff")
			mins, secs = divmod(count, 60)
			timer = '{:02d}:{:02d}'.format(mins, secs)
			self.Label3.configure(text="Timer= "+timer) #update label based on time
			count=count-1 #decrement timer
		#self.Label3.configure(text='''Enter OTP from Email''')
			if count>0: # if timer is not 0
				top.after(1000,countdown,top) #call the function to update the timer after 1s
			else:
				self.Label3.configure(text="Timer= 0:00") #else display timer as 0 in gui
		global count
		count=120 #initialize timer to 2min
		countdown(top)



		self.OTP_e = tk.Entry(top)
		self.OTP_e.place(relx=0.322, rely=0.520, height=70, relwidth=0.37)
		self.OTP_e.configure(background="white")
		#   self.OTP_e.configure(cursor="fleur")
		self.OTP_e.configure(disabledforeground="#a3a3a3")
		self.OTP_e.configure(font="-family {Leelawadee UI Semilight} -size 23")
		self.OTP_e.configure(foreground="#000000")
		self.OTP_e.configure(insertbackground="black")


if __name__ == '__main__':
	vp_start_gui_reg()



