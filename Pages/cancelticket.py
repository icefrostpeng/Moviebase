#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Mar 23, 2021 05:31:05 PM IST  platform: Windows NT
from functools import partial
import sys
from PIL import ImageTk, Image
import PIL
try:
	import Tkinter as tk
except ImportError:
	import tkinter as tk
import search2
from datetime import date
try:
	import ttk
	py3 = False
except ImportError:
	import tkinter.ttk as ttk
	py3 = True
import slots
import nhome
from tkinter import *
#from home import *

#from searchbar import Searchbar

from tkinter import messagebox
import pymysql
import paramiko
import pandas as pd
from paramiko import SSHClient
import payment
from sshtunnel import SSHTunnelForwarder
global co,mod,wil,flag
flag=0
wil=[]
co=0

mypkey = paramiko.RSAKey.from_private_key_file('dem.pem')
sql_hostname = '127.0.0.1'
sql_username = 'root'
sql_password = 'Srishtisingh@12'
sql_main_database = 'movie'
sql_port = 3306
ssh_host = '34.229.131.207'
ssh_user = 'ec2-user'
ssh_port = 22
def query(q,fl=1):
	with SSHTunnelForwarder(
			(ssh_host, ssh_port),
			ssh_username=ssh_user,
			ssh_pkey=mypkey,
			remote_bind_address=(sql_hostname, sql_port)) as tunnel:
		conn = pymysql.connect(host='127.0.0.1', user=sql_username,
				passwd=sql_password, db=sql_main_database,
				port=tunnel.local_bind_port)
		cur=conn.cursor()
		cur.execute(q)
		if(fl==1):
			arr=list(cur.fetchall())
			l=[]
			for i in arr:
				l.append(list(i))
			conn.close()
			return l
		elif(fl==2):
			arr = list(cur.fetchall())
			dic={}
			val=1
			for i in arr:
				li=list(i[1:7])
				a=str(val)+".jpeg"
				li.insert(0,a)
				dic[i[0]]=li
				val+=1
			return dic
		else:
			arr = list(cur.fetchall())
			l=""
			for i in arr:
						l=i[0]
			return l

def button_functionality(mem):
	if mem == 'Gold':
		gold = False
		platinum = True
		diamond = True
	elif mem == 'Platinum':
		gold = False
		platinum = False
		diamond = True
	elif mem == 'Diamond':
		gold = False
		platinum = False
		diamond = False
	else:
		gold = True
		platinum = True
		diamond = True
	return gold, platinum, diamond
def queryse(q):
	with SSHTunnelForwarder(
			(ssh_host, ssh_port),
			ssh_username=ssh_user,
			ssh_pkey=mypkey,
			remote_bind_address=(sql_hostname, sql_port)) as tunnel:
		conn = pymysql.connect(host='127.0.0.1', user=sql_username,
				passwd=sql_password, db=sql_main_database,
				port=tunnel.local_bind_port)
		cur=conn.cursor()
		cur.execute(q)
		
		arr=list(cur.fetchall())
		l=[]
		for i in arr:
			l.append(list(i))
		conn.close()
		return l
def queryu(q,q1):
	with SSHTunnelForwarder(
			(ssh_host, ssh_port),
			ssh_username=ssh_user,
			ssh_pkey=mypkey,
			remote_bind_address=(sql_hostname, sql_port)) as tunnel:
		try:
			conn = pymysql.connect(host='127.0.0.1', user=sql_username,
					passwd=sql_password, db=sql_main_database,
					port=tunnel.local_bind_port)
			cur=conn.cursor()
			cur.execute(q)
			
			cur.execute(q1)
			conn.commit()
			conn.close()
			return 1
		except Exception as e:
			print(e)
			return 0
def search(var,name,mem,email,namess,ratings, top):
	#global namess,ratings
	val=var.get()
	if (len(val)!=0):
		a="select * from moviedet where movie_name LIKE '{0}%'".format(val)
		print (a)
		b=queryse(a)
		if(len(b)!=0):
		    top.destroy()
		    #print(b)
		    search2.vp_start_gui(0,name,mem,email,b,namess,ratings)

		else:
		    a="select * from theaterdet where theater_name='{0}%'".format(val)
		    print (a)
		    b=queryse(a)
		    if(len(b)!=0):
		        top.destroy()
		        #print(b)
		        search2.vp_start_gui(1,name,mem,email,b,namess,ratings)

		    else:
		        messagebox.showerror("Error", "No Movie or Theatre found!!!")

	else:
		messagebox.showerror("Error", "Enter something")
def back(name,mem,email,top):
	top.destroy()
	nhome.vp_start_gui1(name,mem,email)
def fetchdata(email):
	m=query("select tickets.seat_id,moviedet.movie_name,theaterdet.theater_name,theaterdet.city,slotdet.timing,slotdet.dates,tickets.seat_number from tickets,slotdet inner join theaterdet on slotdet.theater_id=theaterdet.theater_id inner join moviedet on moviedet.movie_id=slotdet.movie_id where tickets.slot_id=slotdet.slot_id and email in (select email from User where email='{0}')".format(email))
	print(m)
	return m
def vp_start_gui(name,mem,email,names,rating):
	'''Starting point when module is the main routine.'''
	global val, w, root
	root = tk.Tk()
	
	b=fetchdata(email)
	top = Search (name,mem,email,b,names,rating,root)
	root.mainloop()
def clicked(mov,name,mem,email,names,rating,top):
	dates=mov[5]
	seatid=mov[0]
	seatn=mov[6]
	today=date.today()
	da=dates.split('-')
	dat=date(int(da[0]),int(da[1]),int(da[2]))
	if((dat-today).days>0):
		res=messagebox.askquestion('Cancel Ticket', 'Are You sure you want to cancel seat number {0} ?'.format(seatn))
		if res=='yes':
			print("yes")
			q="delete from tickets where seat_id={0}".format(seatid)
			q2="update seatdet set status='v' where seat_id={0}".format(seatid)
			fl=queryu(q,q2)
			if(fl==1):
				messagebox.showinfo("Tickets Cancelled","Ticket cancelled successfully \n You will receive refund within 3-4 business days")
				top.destroy()
				vp_start_gui(name,mem,email,names,rating)
			else:
				messagebox.showerror("Failure","something went wrong")
	elif((dat-today).days<=0):
		messagebox.showerror("Failure","Cannot cancel this ticket \n Tickets can only be cancelled one day before the show is scheduled")
	
w = None
def create_Search(rt, *args, **kwargs):
	'''Starting point when module is imported by another module.
	   Correct form of call: 'create_Search(root, *args, **kwargs)' .'''
	global w, w_win, root
	#rt = root
	root = rt
	w = tk.Toplevel (root)
	top = Search (w)
	return (w, top)

def destroy_Search():
	global w
	w.destroy()
	w = None

class Search():
	def ahead(self,b,name,mem,email,names,rating,top):
		global co,mod,wil,flag
		if(flag==0):
			co=(co+1)%mod
			for i in wil:
				i.destroy()
			wil=[]
			y=0.233
			yim=0.095
			yib=0.32
			for i in range(4):
				j=(i+4)*co
				if(j<(len(b)-1)):
					self.Movie1 = tk.Frame(top)
					self.Movie1.place(relx=0.18, rely=y, relheight=0.138, relwidth=0.621)
					self.Movie1.configure(relief='groove')
					self.Movie1.configure(borderwidth="2")
					self.Movie1.configure(relief="groove")
					self.Movie1.configure(background="#00002b")
					wil.append(self.Movie1)
					self.Image1 = tk.Label(self.Movie1)
					self.Image1.place(relx=0.025, rely=yim, height=73, width=135)
					self.Image1.configure(background="#d9d9d9")
					self.Image1.configure(disabledforeground="#a3a3a3")
					self.Image1.configure(foreground="#000000")
					self.Image1.configure(text=b[j][1])
					wil.append(self.Image1)
					self.Description1 = tk.Label(self.Movie1,wraplength=400,justify="left")
					self.Description1.place(relx=0.239, rely=yim, height=73, width=573)
					self.Description1.configure(anchor='nw')
					self.Description1.configure(background="#00002b")
					self.Description1.configure(cursor="fleur")
					self.Description1.configure(disabledforeground="#a3a3a3")
					self.Description1.configure(font="-family {Segoe UI} -size 12")
					self.Description1.configure(foreground="#bcfbfe")
					st="Theatre Name : "+b[j][2]+", "+b[j][3]+"\tSeat Number : "+b[j][6]+"\nDate :"+b[j][4]+"\nTimings :"+b[j][5]
					self.Description1.configure(text=st)
					wil.append(self.Description1)
					
					self.Book_b = tk.Button(top,command=partial(clicked,b[j],name,mem,email,names,rating,top))
					self.Book_b.place(relx=0.65, rely=y+0.02, height=54, width=177)
					self.Book_b.configure(activebackground="#000040")
					self.Book_b.configure(activeforeground="white")
					self.Book_b.configure(activeforeground="#ffffff")
					self.Book_b.configure(background="#b3eaff")
					self.Book_b.configure(disabledforeground="#a3a3a3")
					self.Book_b.configure(cursor="hand2")
					self.Book_b.configure(font="-family {Segoe UI} -size 14")
					self.Book_b.configure(foreground="#000000")
					self.Book_b.configure(highlightbackground="#d9d9d9")
					self.Book_b.configure(highlightcolor="black")
					self.Book_b.configure(pady="0")
					self.Book_b.configure(text='''Cancel Ticket!''')
					wil.append(self.Book_b)
					y+=0.15
					yim+=0.03
					yib+=0.15
			st=str(co+1)+" of 4"
			self.Page_list.configure(text=st)
		return
	def bac(self,b,name,mem,email,names,rating,top):
		global co,mod,wil,flag
		if(flag==0):
			if(co!=0):
				co-=1
			for i in wil:
				i.destroy()
			wil=[]
			y=0.233
			yim=0.095
			yib=0.32
			for i in range(4):
				j=(i+4)*co
				if(j<(len(b)-1)):
					self.Movie1 = tk.Frame(top)
					self.Movie1.place(relx=0.18, rely=y, relheight=0.138, relwidth=0.621)
					self.Movie1.configure(relief='groove')
					self.Movie1.configure(borderwidth="2")
					self.Movie1.configure(relief="groove")
					self.Movie1.configure(background="#00002b")
					wil.append(self.Movie1)
					self.Image1 = tk.Label(self.Movie1)
					self.Image1.place(relx=0.025, rely=yim, height=73, width=135)
					self.Image1.configure(background="#d9d9d9")
					self.Image1.configure(disabledforeground="#a3a3a3")
					self.Image1.configure(foreground="#000000")
					self.Image1.configure(text=b[j][1])
					wil.append(self.Image1)
					self.Description1 = tk.Label(self.Movie1,wraplength=400,justify="left")
					self.Description1.place(relx=0.239, rely=yim, height=73, width=573)
					self.Description1.configure(anchor='nw')
					self.Description1.configure(background="#00002b")
					self.Description1.configure(cursor="fleur")
					self.Description1.configure(disabledforeground="#a3a3a3")
					self.Description1.configure(font="-family {Segoe UI} -size 12")
					self.Description1.configure(foreground="#bcfbfe")
					st="Theatre Name : "+b[j][2]+", "+b[j][3]+"\tSeat Number : "+b[j][6]+"\nDate :"+b[j][4]+"\nTimings :"+b[j][5]
					self.Description1.configure(text=st)
					wil.append(self.Description1)
					
					self.Book_b = tk.Button(top,command=partial(clicked,b[j],name,mem,email,names,rating,top))
					self.Book_b.place(relx=0.65, rely=y+0.02, height=54, width=177)
					self.Book_b.configure(activebackground="#000040")
					self.Book_b.configure(activeforeground="white")
					self.Book_b.configure(activeforeground="#ffffff")
					self.Book_b.configure(background="#b3eaff")
					self.Book_b.configure(disabledforeground="#a3a3a3")
					self.Book_b.configure(cursor="hand2")
					self.Book_b.configure(font="-family {Segoe UI} -size 14")
					self.Book_b.configure(foreground="#000000")
					self.Book_b.configure(highlightbackground="#d9d9d9")
					self.Book_b.configure(highlightcolor="black")
					self.Book_b.configure(pady="0")
					self.Book_b.configure(text='''Cancel Ticket!''')
					wil.append(self.Book_b)
					y+=0.15
					yim+=0.03
					yib+=0.15
			st=str(co+1)+" of 4"
			self.Page_list.configure(text=st)
		return
			
	def __init__(self,name,mem,email,b,names,rating,top=None):
		print(b)
		global mod,wil,flag
		mod=len(b)/4
		if(isinstance(mod,int)):
			mod=int(mod)
		elif(isinstance(mod,float)):
			mod=int(mod)+1
		
		'''This class configures and populates the toplevel window.
		   top is the toplevel containing window.'''
		_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
		_fgcolor = '#000000'  # X11 color: 'black'
		_compcolor = '#d9d9d9' # X11 color: 'gray85'
		_ana1color = '#d9d9d9' # X11 color: 'gray85'
		_ana2color = '#ececec' # Closest X11 color: 'gray92'
		self.style = ttk.Style()
		if sys.platform == "win32":
		    self.style.theme_use('winnative')
		self.style.configure('.',background=_bgcolor)
		self.style.configure('.',foreground=_fgcolor)
		self.style.configure('.',font="TkDefaultFont")
		self.style.map('.',background=
		    [('selected', _compcolor), ('active',_ana2color)])

		top.geometry("1280x686+212+135")
		top.minsize(120, 1)
		top.maxsize(3004, 1913)
		top.resizable(1,  1)
		top.title("New Toplevel")
		top.configure(background="#000040")
		top.configure(highlightbackground="#d9d9d9")
		top.configure(highlightcolor="#000000")
		
		top.resizable(False, False)
		global img
		img = ImageTk.PhotoImage(file="bg.png")
		self.Background = tk.Label(top,image = img)        
		self.Background.place(relx=0, rely=0, height=1000, width=1500)
		self.Background=img
		
		
		self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
		top.configure(menu = self.menubar)

		

################################################################Result instance############################################################
		y=0.233
		yim=0.095
		yib=0.32
		
		if(len(b)>4):
			print(mod)
			for i in range(4):
				self.Movie1 = tk.Frame(top)
				self.Movie1.place(relx=0.18, rely=y, relheight=0.138, relwidth=0.621)
				self.Movie1.configure(relief='groove')
				self.Movie1.configure(borderwidth="2")
				self.Movie1.configure(relief="groove")
				self.Movie1.configure(background="#00002b")
				wil.append(self.Movie1)
				self.Image1 = tk.Label(self.Movie1)
				self.Image1.place(relx=0.025, rely=yim, height=73, width=135)
				self.Image1.configure(background="#d9d9d9")
				self.Image1.configure(disabledforeground="#a3a3a3")
				self.Image1.configure(foreground="#000000")
				self.Image1.configure(text=b[i][1])
				wil.append(self.Image1)
				self.Description1 = tk.Label(self.Movie1,wraplength=400,justify="left")
				self.Description1.place(relx=0.239, rely=yim, height=73, width=573)
				self.Description1.configure(anchor='nw')
				self.Description1.configure(background="#00002b")
				self.Description1.configure(cursor="fleur")
				self.Description1.configure(disabledforeground="#a3a3a3")
				self.Description1.configure(font="-family {Segoe UI} -size 12")
				self.Description1.configure(foreground="#bcfbfe")
				st="Theatre Name : "+b[i][2]+", "+b[i][3]+"\tSeat Number : "+b[i][6]+"\nDate : "+b[i][4]+"\nTimings : "+b[i][5]
				self.Description1.configure(text=st)
				wil.append(self.Description1)
					
				self.Book_b = tk.Button(top,command=partial(clicked,b[i],name,mem,email,names,rating,top))
				self.Book_b.place(relx=0.65, rely=y+0.02, height=54, width=177)
				self.Book_b.configure(activebackground="#000040")
				self.Book_b.configure(activeforeground="white")
				self.Book_b.configure(activeforeground="#ffffff")
				self.Book_b.configure(background="#b3eaff")
				self.Book_b.configure(disabledforeground="#a3a3a3")
				self.Book_b.configure(cursor="hand2")
				self.Book_b.configure(font="-family {Segoe UI} -size 14")
				self.Book_b.configure(foreground="#000000")
				self.Book_b.configure(highlightbackground="#d9d9d9")
				self.Book_b.configure(highlightcolor="black")
				self.Book_b.configure(pady="0")
				self.Book_b.configure(text='''Cancel Ticket!''')
				wil.append(self.Book_b)
				y+=0.15
				yim+=0.03
				yib+=0.15
		else:
			flag=1
			for i in b:
				self.Movie1 = tk.Frame(top)
				self.Movie1.place(relx=0.18, rely=y, relheight=0.138, relwidth=0.621)
				self.Movie1.configure(relief='groove')
				self.Movie1.configure(borderwidth="2")
				self.Movie1.configure(relief="groove")
				self.Movie1.configure(background="#00002b")
				self.Image1 = tk.Label(self.Movie1)
				self.Image1.place(relx=0.025, rely=yim, height=73, width=135)
				self.Image1.configure(background="#d9d9d9")
				self.Image1.configure(disabledforeground="#a3a3a3")
				self.Image1.configure(foreground="#000000")
				self.Image1.configure(text=i[1])
				self.Description1 = tk.Label(self.Movie1,wraplength=400,justif="left")
				self.Description1.place(relx=0.239, rely=yim, height=73, width=573)
				self.Description1.configure(anchor='nw')
				self.Description1.configure(background="#00002b")
				self.Description1.configure(cursor="fleur")
				self.Description1.configure(disabledforeground="#a3a3a3")
				self.Description1.configure(font="-family {Segoe UI} -size 12")
				self.Description1.configure(foreground="#bcfbfe")
				st="Theatre Name : "+i[2]+", "+i[3]+"\tSeat Number : "+i[6]+"\nDate : "+i[4]+"\nTimings : "+i[5]
				self.Description1.configure(text=st)
					
				self.Book_b = tk.Button(top,command=partial(clicked,i,name,mem,email,names,rating,top))
				self.Book_b.place(relx=0.65, rely=y+0.02, height=54, width=177)
				self.Book_b.configure(activebackground="#000040")
				self.Book_b.configure(activeforeground="white")
				self.Book_b.configure(activeforeground="#ffffff")
				self.Book_b.configure(background="#b3eaff")
				self.Book_b.configure(disabledforeground="#a3a3a3")
				self.Book_b.configure(cursor="hand2")
				self.Book_b.configure(font="-family {Segoe UI} -size 14")
				self.Book_b.configure(foreground="#000000")
				self.Book_b.configure(highlightbackground="#d9d9d9")
				self.Book_b.configure(highlightcolor="black")
				self.Book_b.configure(pady="0")
				self.Book_b.configure(text='''Cancel Ticket!''')
				y+=0.15
				yim+=0.03
				yib+=0.15
		
##############################################################################################################################################

##################################################################scroller########################################################
		self.Previous = tk.Button(top,command=lambda:self.bac(b,name,mem,email,names,rating,top))
		self.Previous.place(relx=0.383, rely=0.933, height=24, width=47)
		self.Previous.configure(activebackground="#ececec")
		self.Previous.configure(activeforeground="#000000")
		self.Previous.configure(background="#b4eafe")
		self.Previous.configure(disabledforeground="#a3a3a3")
		self.Previous.configure(font="-family {Segoe UI} -size 15")
		self.Previous.configure(foreground="#000000")
		self.Previous.configure(highlightbackground="#d9d9d9")
		self.Previous.configure(highlightcolor="black")
		self.Previous.configure(pady="0")
		self.Previous.configure(text='''<''')

		self.Next = tk.Button(top,command=lambda:self.ahead(b,name,mem,email,names,rating,top))
		self.Next.place(relx=0.57, rely=0.933, height=24, width=47)
		self.Next.configure(activebackground="#ececec")
		self.Next.configure(activeforeground="#000000")
		self.Next.configure(background="#b4eafe")
		self.Next.configure(disabledforeground="#a3a3a3")
		self.Next.configure(font="-family {Segoe UI} -size 15")
		self.Next.configure(foreground="#000000")
		self.Next.configure(highlightbackground="#d9d9d9")
		self.Next.configure(highlightcolor="black")
		self.Next.configure(pady="0")
		self.Next.configure(text='''>''')

		self.Page_list = tk.Label(top)
		self.Page_list.place(relx=0.43, rely=0.933, height=21, width=164)
		self.Page_list.configure(activebackground="#f0f0f0f0f0f0")
		self.Page_list.configure(background="#000040")
		self.Page_list.configure(disabledforeground="#a3a3a3")
		self.Page_list.configure(font="-family {Segoe UI} -size 12")
		self.Page_list.configure(foreground="#b4eafe")
		self.Page_list.configure(text='''1 of 4''')
		
		
#####################################################################################################################################
####################Membership Function##################################################
		self.membership = mem
		self.Membership_f = tk.LabelFrame(top)
		self.Membership_f.place(relx=0.013, rely=0.219, relheight=0.516, relwidth=0.14)
		self.Membership_f.configure(relief='groove')
		self.Membership_f.configure(foreground="#edea67")
		self.Membership_f.configure(background="#bfe2ff")
		self.Membership_f.configure(highlightbackground="#f3fee2")
		self.Membership_f.configure(highlightcolor="#4bc602")

		self.TSeparator3 = ttk.Separator(top)
		self.TSeparator3.place(relx=0.165, rely=0.168, relheight=0.845)
		self.TSeparator3.configure(orient="vertical")

		# redirect to payment
		def button_click(product):
		    top.destroy()
		    action = 1
		    payment.vp_start_gui_P(name, mem, product, email, action)


		# membership status
		gold, platinum, diamond = button_functionality(mem)

		# Gold Button
		prod_gold = ["Gold", 600]
		self.Gold_b = tk.Button(self.Membership_f, command=lambda: button_click(prod_gold))
		self.Gold_b.place(relx=0.056, rely=0.734, height=84, width=157, bordermode='ignore')
		self.Gold_b.configure(activebackground="#f0df99")
		self.Gold_b.configure(activeforeground="#000000")
		self.Gold_b.configure(background="#ffda04")
		self.Gold_b.configure(borderwidth="9")
		self.Gold_b.configure(disabledforeground="#a3a3a3")
		self.Gold_b.configure(font="-family {Segoe UI} -size 15")
		self.Gold_b.configure(foreground="#000000")
		self.Gold_b.configure(highlightbackground="#d9d9d9")
		self.Gold_b.configure(highlightcolor="black")
		self.Gold_b.configure(pady="0")
		self.Gold_b.configure(text='Gold')
		if gold:
		    self.Gold_b["state"] = "normal"
		else:
		    self.Gold_b["state"] = "disabled"

		# Platinum Button
		prod_platinum = ["Platinum", 800]
		self.Platinum_b = tk.Button(self.Membership_f, command=lambda: button_click(prod_platinum))
		self.Platinum_b.place(relx=0.056, rely=0.452, height=84, width=157, bordermode='ignore')
		self.Platinum_b.configure(activebackground="#707070")
		self.Platinum_b.configure(activeforeground="white")
		self.Platinum_b.configure(activeforeground="#000000")
		self.Platinum_b.configure(background="#d8d8d8")
		self.Platinum_b.configure(borderwidth="9")
		self.Platinum_b.configure(disabledforeground="#a3a3a3")
		self.Platinum_b.configure(font="-family {Segoe UI} -size 15")
		self.Platinum_b.configure(foreground="#000000")
		self.Platinum_b.configure(highlightbackground="#d9d9d9")
		self.Platinum_b.configure(highlightcolor="black")
		self.Platinum_b.configure(pady="0")
		self.Platinum_b.configure(text='''Platinum''')
		if platinum:
		    self.Platinum_b["state"] = "normal"
		else:
		    self.Platinum_b["state"] = "disabled"

		# Diamond Button
		prod_diamond = ["Diamond", 1000]
		self.Diamond_b = tk.Button(self.Membership_f, command=lambda: button_click(prod_diamond))
		self.Diamond_b.place(relx=0.061, rely=0.169, height=84, width=157, bordermode='ignore')
		self.Diamond_b.configure(activebackground="#d9fcff")
		self.Diamond_b.configure(activeforeground="#7070fa")
		self.Diamond_b.configure(background="#2de9f2")
		self.Diamond_b.configure(borderwidth="9")
		self.Diamond_b.configure(disabledforeground="#a3a3a3")
		self.Diamond_b.configure(font="-family {Segoe UI} -size 15")
		self.Diamond_b.configure(foreground="#000000")
		self.Diamond_b.configure(highlightbackground="#d9d9d9")
		self.Diamond_b.configure(highlightcolor="#e9f552")
		self.Diamond_b.configure(highlightthickness="6")
		self.Diamond_b.configure(pady="0")
		self.Diamond_b.configure(text='''Diamond''')
		if diamond:
		    self.Diamond_b["state"] = "normal"
		else:
		    self.Diamond_b["state"] = "disabled"

		# Label in membership block
		self.Join_l = tk.Label(self.Membership_f)
		self.Join_l.place(relx=0.056, rely=0.028, height=41, width=155, bordermode='ignore')
		self.Join_l.configure(activebackground="#f9f9f9")
		self.Join_l.configure(activeforeground="black")
		self.Join_l.configure(background="#bfe2ff")
		self.Join_l.configure(disabledforeground="#a3a3a3")
		self.Join_l.configure(font="-family {Segoe UI} -size 12")
		self.Join_l.configure(foreground="#000000")
		self.Join_l.configure(highlightbackground="#d9d9d9")
		self.Join_l.configure(highlightcolor="black")
		self.Join_l.configure(text=f'Join our Membership plan!')
		self.Join_l.configure(wraplength="150")
##########################################################################################################################################
####################Sidebar########################################################################
		self.TSeparator4 = ttk.Separator(top)
		self.TSeparator4.place(relx=0.818, rely=0.168,  relheight=0.835)
		self.TSeparator4.configure(orient="vertical")


		self.Listofmovies_f = tk.LabelFrame(top)
		self.Listofmovies_f.place(relx=0.829, rely=0.157, relheight=0.831
		        , relwidth=0.138)
		self.Listofmovies_f.configure(relief='groove')
		self.Listofmovies_f.configure(font="-family {Segoe UI} -size 17")
		self.Listofmovies_f.configure(foreground="#000000")
		self.Listofmovies_f.configure(text='''List of Movies''')
		self.Listofmovies_f.configure(background="#d7eeff")
		self.Listofmovies_f.configure(highlightbackground="#f0f0f0f0f0f0")
		self.Listofmovies_f.configure(highlightcolor="#646464646464")

		self.page_id = tk.Label(self.Listofmovies_f)
		self.page_id.place(relx=0.04, rely=0.947, height=21, width=166
		        , bordermode='ignore')
		self.page_id.configure(activebackground="#f9f9f9")
		self.page_id.configure(activeforeground="black")
		self.page_id.configure(background="#000040")
		self.page_id.configure(borderwidth="10")
		self.page_id.configure(disabledforeground="#a3a3a3")
		self.page_id.configure(font="-family {Segoe UI} -size 13")
		self.page_id.configure(foreground="#ffffff")
		self.page_id.configure(highlightbackground="#d9d9d9")
		self.page_id.configure(highlightcolor="black")
		self.page_id.configure(text='''1 of 2''')

		namem, rating = names,rating
		y=0.07
		for i in range(0,len(namem)):
		                self.Movie1_b = tk.Button(self.Listofmovies_f)
		                self.Movie1_b.place(relx=0.056, rely=y, height=74, width=157, bordermode='ignore')
		                self.Movie1_b.configure(activebackground="#ececec")
		                self.Movie1_b.configure(activeforeground="#000000")
		                self.Movie1_b.configure(anchor='nw')
		                self.Movie1_b.configure(background="#d7eeff")
		                self.Movie1_b.configure(disabledforeground="#a3a3a3")
		                self.Movie1_b.configure(font="-family {Segoe UI} -size 12")
		                self.Movie1_b.configure(foreground="#000000")
		                self.Movie1_b.configure(highlightbackground="#d9d9d9")
		                self.Movie1_b.configure(highlightcolor="black")
		                self.Movie1_b.configure(pady="0")
		                self.Movie1_b.configure(text='''{0} \n\nRating: {1}/5'''.format(namem[i],rating[i]))
		                self.Movie1_b.configure(wraplength="150")
		                y+=0.14
#####################################################################################################################################
#####################################HOME BAR###################################################
		self.Home_f = tk.LabelFrame(top)
		self.Home_f.place(relx=0.023, rely=0.029, relheight=0.093, relwidth=0.50)
		self.Home_f.configure(relief='groove')
		self.Home_f.configure(foreground="#000000")
		self.Home_f.configure(background="#e8e8ff")
		self.Home_f.configure(highlightbackground="#d9d9d9")
		self.Home_f.configure(highlightcolor="black")

		self.home_inner_f = tk.Frame(self.Home_f)
		self.home_inner_f.place(relx=0.017, rely=0.109, relheight=0.797, relwidth=0.959, bordermode='ignore')
		self.home_inner_f.configure(relief='groove')
		self.home_inner_f.configure(borderwidth="2")
		self.home_inner_f.configure(relief="groove")
		self.home_inner_f.configure(background="#b3eaff")
		self.home_inner_f.configure(highlightbackground="#d9d9d9")
		self.home_inner_f.configure(highlightcolor="black")

		self.Home_b = tk.Button(self.home_inner_f,command=lambda:back(name,mem,email,top))
		self.Home_b.place(relx=0.025, rely=0.0, height=54, width=77)
		self.Home_b.configure(activebackground="#ececec")
		self.Home_b.configure(activeforeground="#000000")
		self.Home_b.configure(background="#000040")
		self.Home_b.configure(disabledforeground="#a3a3a3")
		self.Home_b.configure(font="-family {Segoe UI} -size 12")
		self.Home_b.configure(foreground="#ffffff")
		self.Home_b.configure(highlightbackground="#d9d9d9")
		self.Home_b.configure(highlightcolor="black")
		self.Home_b.configure(pady="0")
		self.Home_b.configure(text='''Home''')

		self.Member_l = tk.Label(self.home_inner_f)
		self.Member_l.place(relx=0.262, rely=0.137, height=34, width=352)
		self.Member_l.configure(activebackground="#b3eaff")
		self.Member_l.configure(activeforeground="black")
		self.Member_l.configure(background="#b3eaff")
		self.Member_l.configure(disabledforeground="#a3a3a3")
		self.Member_l.configure(font="-family {Segoe UI} -size 12")
		self.Member_l.configure(foreground="#000000")
		self.Member_l.configure(highlightbackground="#d9d9d9")
		self.Member_l.configure(highlightcolor="black")
		self.Member_l.configure(text=f'Member status {name} has {mem} Membership')
###################################################Search Bar###############################################################################
		self.Search_f = tk.LabelFrame(top)
		self.Search_f.place(relx=0.609, rely=0.044, relheight=0.06
		        , relwidth=0.322)
		self.Search_f.configure(relief='groove')
		self.Search_f.configure(foreground="black")
		self.Search_f.configure(background="#e8e8ff")
		self.Search_f.configure(highlightbackground="#d9d9d9")
		self.Search_f.configure(highlightcolor="black")
		var=StringVar()
		self.Search_e = tk.Entry(self.Search_f,textvariable=var)
		self.Search_e.place(relx=0.25, rely=0.1, height=38, relwidth=0.745
		        , bordermode='ignore')
		self.Search_e.configure(background="white")
		self.Search_e.configure(disabledforeground="#a3a3a3")
		self.Search_e.configure(font="-family {Segoe UI} -size 12")
		self.Search_e.configure(foreground="#000000")
		self.Search_e.configure(highlightbackground="#d9d9d9")
		self.Search_e.configure(highlightcolor="black")
		self.Search_e.configure(insertbackground="black")
		self.Search_e.configure(selectbackground="blue")
		self.Search_e.configure(selectforeground="white")
		print("here")

		self.Search_b = tk.Button(self.Search_f,command=lambda:search(var,name,mem,email,names,rating, top) )
		self.Search_b.place(relx=0.0, rely=0.0, height=44, width=100
		        , bordermode='ignore')
		self.Search_b.configure(activebackground="#b3eaff")
		self.Search_b.configure(activeforeground="#000000")
		self.Search_b.configure(background="#00205b")
		self.Search_b.configure(disabledforeground="#a3a3a3")
		self.Search_b.configure(cursor="hand2")
		self.Search_b.configure(font="-family {Segoe UI} -size 12")
		self.Search_b.configure(foreground="#ffffff")
		self.Search_b.configure(highlightbackground="#d9d9d9")
		self.Search_b.configure(highlightcolor="black")
		self.Search_b.configure(pady="0")
		self.Search_b.configure(text='''Search''')
###############################################################################################################################################


if __name__ == '__main__':
    vp_start_gui(0,'sris','Gold','srish@gh.co')


